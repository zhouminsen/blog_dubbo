<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <!-- 自定义路径认证过虑器 -->
    <bean id="customAccessControlFilter" class="org.zjw.blog.controller.shiro.CustomAccessControlFilter">
    </bean>
    <!-- web.xml中shiro的filter对应的bean -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--
            loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由customAccessControlFilter进行表单认证
            1认证失败 request.setAttribute("shiroLoginFailure","异常类名") 转发给login.action
            2认证成功重定向successUrl
        -->
        <property name="loginUrl" value="/admin/login.jsp"/>
        <!-- 认证成功统一跳转到first.action，建议不配置，shiro认证成功自动到上一个请求路径 -->
        <!-- <property name="successUrl" value="/admin/first.shtml" /> -->
        <!-- 通过unauthorizedUrl指定没有权限操作时跳转页面-->
        <property name="unauthorizedUrl" value="/refuse.jsp"/>
        <!-- 自定义filter配置 -->
        <property name="filters">
            <map>
                <entry key="authc" value-ref="customAccessControlFilter"/>
            </map>
        </property>
        <!-- 过虑器链定义，从上向下顺序执行，小范围到大范围依次排下 ,一般将/**放在最下边 -->
        <!-- 除开静态资源,退出,cookie过滤主页显示,其他全部需要认证 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 对静态资源设置匿名访问 -->
                /images/** = anon
                /js/** = anon
                /styles/** = anon
                /validatecode.jsp = anon

                <!-- 请求 logout.action地址，shiro去清除session-->
                /logout.action = logout
                <!--商品查询需要商品查询权限 ，取消url拦截配置，使用注解授权方式 -->
                <!--
                    /items/queryItems.action = perms[item:query]
                    /items/editItems.action = perms[item:edit]
                -->
                <!-- 配置记住我或认证通过可以访问的地址 -->
                <!-- /index.jsp = user -->
                /admin/first.shtml = user
                /admin/menu/getMenuTree.shtml=user
                /welcome.jsp = user
                /admin/login.jsp=anon
                /login.shtml=anon
                <!--
                    /** = authc 所有url都必须认证通过才可以访问
                -->
                <!--小范围到大范围依次排下 , 前面已设定的路径范围,如果后面的路径范围已经包含了该路劲,不拦截-->
                /admin/role/getPermissionByUserId*=anon
                <!-- /admin/blog/comment/save*=anon -->
                /admin/**= authc
                /**=anon
            </value>
        </property>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
    <!-- 开启shiro注解支持 -->
    <!-- 	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
                <property name="securityManager" ref="securityManager" />
        </bean> -->

    <!-- securityManager安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="customRealm"/>
        <!-- 2注入缓存管理器 -->
        <!-- <property name="cacheManager" ref="shiroCachedManager" /> -->
        <!-- 3注入session管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
        <!-- 4记住我 -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>
    <!-- 凭证匹配器   进行密码验证时要对token里的密码进行md5加密-->
    <bean id="credentialsMatcher"
          class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="1"/>
    </bean>
    <!-- 自定义realm -->
    <bean id="customRealm" class="org.zjw.blog.controller.shiro.CustomRealm">
        <!-- 将凭证匹配器设置到realm中，realm按照凭证匹配器的要求进行散列
        将下property注释掉的话,则该类中的验证密码方法不再进行MD5加密
        -->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <!-- 2缓存管理器 -->
    <!-- <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml" />
    </bean> -->

    <!--<bean id="memcachedSessionDao" class="org.java.base.session.MemcachedSessionDao">-->
        <!--<constructor-arg ref="memCachedClient"></constructor-arg>-->
    <!--</bean>-->

    <!-- 3会话管理器 -->
    <bean id="sessionManager"
          class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--<property name="sessionDAO" ref="memcachedSessionDao"></property>-->
        <!-- session的失效时长，单位毫秒 -->
        <property name="globalSessionTimeout" value="600000"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 定时检查失效的session -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!--<property name="sessionIdCookie.name" value="managerid1"/>-->
        <property name="sessionIdCookie.path" value="/"/>
    </bean>

    <!-- 记住我cookie -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- rememberMe是cookie的名字 -->
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <!-- 记住我cookie生效时间30天 -->
        <property name="maxAge" value="2592000"/>
    </bean>
    <!-- rememberMeManager管理器，写cookie，取出cookie生成用户信息 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

</beans>